apply plugin: 'com.android.library'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 12
        versionName "1.1"
        externalNativeBuild {
            cmake {
                targets 'slib', 'cpufeatures', 'freetype', 'sqlite3', 'opus', 'vpx', 'zxing', 'hiredis'
                arguments '-DANDROID_ARM_MODE=arm', '-DANDROID_ARM_NEON=TRUE'
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
        debug {
            jniDebuggable true
        }
        release {
            minifyEnabled false
        }
    }
    sourceSets {
        main.java.srcDirs += '../../../java/android'
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':external_ShortcutBadger')
    implementation 'com.google.firebase:firebase-core:10.2.1'
    implementation 'com.google.firebase:firebase-messaging:10.2.1'
}

tasks.all { task ->
    if (task.name == "assembleDebug" || task.name == "assembleRelease") {
        task.dependsOn(project(":external_ShortcutBadger").getTasksByName(task.name, true)[0])
        task.doLast {
            def copyArr = { srcDir, srcFileName, dstFileName ->
                def sourceFile = projectDir.getPath() + "/" + srcDir + "/" + srcFileName + (task.name == "assembleDebug" ? "-debug.aar" : "-release.aar");
                def targetDir = projectDir.getPath() + "/../../../lib/Android";
                def targetFileName = dstFileName + ".aar";
                def targetFile = targetDir + "/" + targetFileName;
                new File(targetDir).mkdirs()
                new File(targetFile).delete();
                new File(sourceFile).renameTo(targetFile);
            }
            System.out.println("Moving slib.aar into lib!")
            copyArr("build/outputs/aar", "slib", "slib")
            copyArr("../../../external/java/ShortcutBadger/build/outputs/aar", "external_ShortcutBadger", "ShortcutBadger")
        }
    }
}