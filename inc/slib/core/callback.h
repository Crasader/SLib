#ifndef CHECKHEADER_SLIB_CORE_CALLBACK
#define CHECKHEADER_SLIB_CORE_CALLBACK

#include "definition.h"

#include "object.h"
#include "pointer.h"

SLIB_NAMESPACE_BEGIN

class SLIB_EXPORT Runnable : public Object
{
	SLIB_DECLARE_OBJECT(Runnable, Object)
	
public:
	virtual void run() = 0;
};

#define SLIB_CALLBACK(CALLBACK, ...) slib::_Runnable_createCallback(CALLBACK, ##__VA_ARGS__)
#define SLIB_CALLBACK_CLASS(CLASS, CALLBACK, OBJECT, ...) slib::_Runnable_createClassCallback(slib::Ptr<CLASS>(OBJECT), &CLASS::CALLBACK, ##__VA_ARGS__)
#define SLIB_CALLBACK_REF(CLASS, CALLBACK, OBJECT, ...) slib::_Runnable_createClassCallback(slib::Ptr<CLASS>(slib::Ref<CLASS>(OBJECT)), &CLASS::CALLBACK, ##__VA_ARGS__)
#define SLIB_CALLBACK_WEAKREF(CLASS, CALLBACK, OBJECT, ...) slib::_Runnable_createClassCallback(slib::Ptr<CLASS>(slib::WeakRef<CLASS>(OBJECT)), &CLASS::CALLBACK, ##__VA_ARGS__)

template <class CLASS>
class SLIB_EXPORT _ClassCallbackRunnable : public Runnable
{
public:
	_ClassCallbackRunnable(const Ptr<CLASS>& object, void (CLASS::*callback)())
	{
		m_object = object;
		m_callback = callback;
	}
protected:
	void run()
	{
		PtrLocker<CLASS> ptr(m_object);
		if (ptr.isNotNull()) {
			((ptr.get())->*m_callback)();
		}
	}
private:
	Ptr<CLASS> m_object;
	void (CLASS::*m_callback)();
};

template <class CLASS>
SLIB_EXPORT Ref<Runnable> _Runnable_createClassCallback(const Ptr<CLASS>& object, void (CLASS::*callback)())
{
	return new _ClassCallbackRunnable<CLASS>(object, callback);
}

class SLIB_EXPORT _CallbackRunnable : public Runnable
{
public:
	_CallbackRunnable(void (*callback)())
	{
		m_callback = callback;
	}
protected:
	void run()
	{
		m_callback();
	}
private:
	void (*m_callback)();
};

Ref<Runnable> _Runnable_createCallback(void (*callback)());

#define _SLIB_RUNNABLE_DEFINE_CALLBACK(ID) \
template <class CLASS, _SLIB_RUNNABLE_CALLBACK_TEMPLATES##ID> \
class SLIB_EXPORT _ClassCallbackRunnable##ID : public Runnable \
{ \
public: \
	_ClassCallbackRunnable##ID(const Ptr<CLASS>& object, void (CLASS::*callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID), _SLIB_RUNNABLE_CALLBACK_PARAMS##ID) \
	{ \
		m_object = object; \
		m_callback = callback; \
		_SLIB_RUNNABLE_CALLBACK_ASSIGN##ID \
	} \
protected: \
	void run() \
	{ \
		PtrLocker<CLASS> ptr(m_object); \
		if (ptr.isNotNull()) { \
			((ptr.get())->*m_callback)(_SLIB_RUNNABLE_CALLBACK_VALUES##ID); \
		} \
	} \
private: \
	Ptr<CLASS> m_object; \
	void (CLASS::*m_callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID); \
	_SLIB_RUNNABLE_CALLBACK_MEMBERS##ID \
}; \
template <class CLASS, _SLIB_RUNNABLE_CALLBACK_TEMPLATES##ID> \
SLIB_EXPORT Ref<Runnable> _Runnable_createClassCallback(const Ptr<CLASS>& object, void (CLASS::*callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID), _SLIB_RUNNABLE_CALLBACK_PARAMS##ID) \
{ \
	return new _ClassCallbackRunnable##ID<CLASS, _SLIB_RUNNABLE_CALLBACK_TYPES##ID>(object, callback, _SLIB_RUNNABLE_CALLBACK_VALUES##ID); \
} \
template <_SLIB_RUNNABLE_CALLBACK_TEMPLATES##ID> \
class SLIB_EXPORT _CallbackRunnable##ID : public Runnable \
{ \
public: \
	_CallbackRunnable##ID(void(*callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID), _SLIB_RUNNABLE_CALLBACK_PARAMS##ID) \
	{ \
		m_callback = callback; \
		_SLIB_RUNNABLE_CALLBACK_ASSIGN##ID \
	} \
protected: \
	void run() \
	{ \
		(*m_callback)(_SLIB_RUNNABLE_CALLBACK_VALUES##ID); \
	} \
private: \
	void(*m_callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID); \
	_SLIB_RUNNABLE_CALLBACK_MEMBERS##ID \
}; \
template <_SLIB_RUNNABLE_CALLBACK_TEMPLATES##ID> \
SLIB_EXPORT Ref<Runnable> _Runnable_createCallback(void(*callback)(_SLIB_RUNNABLE_CALLBACK_PARAMS##ID), _SLIB_RUNNABLE_CALLBACK_PARAMS##ID) \
{ \
	return new _CallbackRunnable##ID<_SLIB_RUNNABLE_CALLBACK_TYPES##ID>(callback, _SLIB_RUNNABLE_CALLBACK_VALUES##ID); \
}

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES1 class T1
#define _SLIB_RUNNABLE_CALLBACK_PARAMS1 T1 v1
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS1 T1 v1;
#define _SLIB_RUNNABLE_CALLBACK_TYPES1 T1
#define _SLIB_RUNNABLE_CALLBACK_VALUES1 v1
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN1 this->v1=v1;
_SLIB_RUNNABLE_DEFINE_CALLBACK(1)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES2 _SLIB_RUNNABLE_CALLBACK_TEMPLATES1, class T2
#define _SLIB_RUNNABLE_CALLBACK_PARAMS2 _SLIB_RUNNABLE_CALLBACK_PARAMS1, T2 v2
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS2 _SLIB_RUNNABLE_CALLBACK_MEMBERS1 T2 v2;
#define _SLIB_RUNNABLE_CALLBACK_TYPES2 _SLIB_RUNNABLE_CALLBACK_TYPES1, T2
#define _SLIB_RUNNABLE_CALLBACK_VALUES2 _SLIB_RUNNABLE_CALLBACK_VALUES1, v2
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN2 _SLIB_RUNNABLE_CALLBACK_ASSIGN1 this->v2=v2;
_SLIB_RUNNABLE_DEFINE_CALLBACK(2)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES3 _SLIB_RUNNABLE_CALLBACK_TEMPLATES2, class T3
#define _SLIB_RUNNABLE_CALLBACK_PARAMS3 _SLIB_RUNNABLE_CALLBACK_PARAMS2, T3 v3
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS3 _SLIB_RUNNABLE_CALLBACK_MEMBERS2 T3 v3;
#define _SLIB_RUNNABLE_CALLBACK_TYPES3 _SLIB_RUNNABLE_CALLBACK_TYPES2, T3
#define _SLIB_RUNNABLE_CALLBACK_VALUES3 _SLIB_RUNNABLE_CALLBACK_VALUES2, v3
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN3 _SLIB_RUNNABLE_CALLBACK_ASSIGN2 this->v3=v3;
_SLIB_RUNNABLE_DEFINE_CALLBACK(3)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES4 _SLIB_RUNNABLE_CALLBACK_TEMPLATES3, class T4
#define _SLIB_RUNNABLE_CALLBACK_PARAMS4 _SLIB_RUNNABLE_CALLBACK_PARAMS3, T4 v4
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS4 _SLIB_RUNNABLE_CALLBACK_MEMBERS3 T4 v4;
#define _SLIB_RUNNABLE_CALLBACK_TYPES4 _SLIB_RUNNABLE_CALLBACK_TYPES3, T4
#define _SLIB_RUNNABLE_CALLBACK_VALUES4 _SLIB_RUNNABLE_CALLBACK_VALUES3, v4
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN4 _SLIB_RUNNABLE_CALLBACK_ASSIGN3 this->v4=v4;
_SLIB_RUNNABLE_DEFINE_CALLBACK(4)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES5 _SLIB_RUNNABLE_CALLBACK_TEMPLATES4, class T5
#define _SLIB_RUNNABLE_CALLBACK_PARAMS5 _SLIB_RUNNABLE_CALLBACK_PARAMS4, T5 v5
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS5 _SLIB_RUNNABLE_CALLBACK_MEMBERS4 T5 v5;
#define _SLIB_RUNNABLE_CALLBACK_TYPES5 _SLIB_RUNNABLE_CALLBACK_TYPES4, T5
#define _SLIB_RUNNABLE_CALLBACK_VALUES5 _SLIB_RUNNABLE_CALLBACK_VALUES4, v5
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN5 _SLIB_RUNNABLE_CALLBACK_ASSIGN4 this->v5=v5;
_SLIB_RUNNABLE_DEFINE_CALLBACK(5)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES6 _SLIB_RUNNABLE_CALLBACK_TEMPLATES5, class T6
#define _SLIB_RUNNABLE_CALLBACK_PARAMS6 _SLIB_RUNNABLE_CALLBACK_PARAMS5, T6 v6
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS6 _SLIB_RUNNABLE_CALLBACK_MEMBERS5 T6 v6;
#define _SLIB_RUNNABLE_CALLBACK_TYPES6 _SLIB_RUNNABLE_CALLBACK_TYPES5, T6
#define _SLIB_RUNNABLE_CALLBACK_VALUES6 _SLIB_RUNNABLE_CALLBACK_VALUES5, v6
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN6 _SLIB_RUNNABLE_CALLBACK_ASSIGN5 this->v6=v6;
_SLIB_RUNNABLE_DEFINE_CALLBACK(6)

#define _SLIB_RUNNABLE_CALLBACK_TEMPLATES7 _SLIB_RUNNABLE_CALLBACK_TEMPLATES6, class T7
#define _SLIB_RUNNABLE_CALLBACK_PARAMS7 _SLIB_RUNNABLE_CALLBACK_PARAMS6, T7 v7
#define _SLIB_RUNNABLE_CALLBACK_MEMBERS7 _SLIB_RUNNABLE_CALLBACK_MEMBERS6 T7 v7;
#define _SLIB_RUNNABLE_CALLBACK_TYPES7 _SLIB_RUNNABLE_CALLBACK_TYPES6, T7
#define _SLIB_RUNNABLE_CALLBACK_VALUES7 _SLIB_RUNNABLE_CALLBACK_VALUES6, v7
#define _SLIB_RUNNABLE_CALLBACK_ASSIGN7 _SLIB_RUNNABLE_CALLBACK_ASSIGN6 this->v7=v7;
_SLIB_RUNNABLE_DEFINE_CALLBACK(7)

SLIB_NAMESPACE_END

#endif
